# Django Learning EBook_________________________________


# Pycharm installation and usage:

	Change font size= Crt+Alt+S  > font > change

	To run python program:
		1. Go to Project folder > right click > New > Python File
		2. write print("Hello World")
		3 go to left down corner on Python Console and press run. If this does not work right click python file > 
		
		
	There is also a terminal console to make pip install and so on....
	It is very usefull to use this terminal!


# Django beginning:

	* To create django project use the following command in the terminal: **django-admin startproject <project Name>**
	* This will create a folder with project name
	* The project will have the structure of image: <imgs/Django_Project_Folder_Organization.png>
	* we will work mustly in **urls** and **settings**
	* to **RUN** the server run the manage.py on terminal like :**python manage.py runserver** #on the file working directory
	* the image of the previous command: <imgs/Django_runserver.png>
	* this will create a 
	
	
# Django first application:

		## Django request response cycle:
		
			<imgs/django-request-response-cycle.jpg
			
		## Create URL
		
			* DJango uses MVC, like all.
			* To create an url go to urls.py and write the following:
				
				'''
				from .views import hello
				from django.urls import path
				urlpatterns = [
					path("hello/", hello),
					path('admin/', admin.site.urls),

				]
				'''
			* As you can see in the previous code you need to create a new python file named **views.py** (of course it could be other), inside project folder (the same that as urls.py) 
			* In views.py you can create all functions used for each path
			* for the first view example see this code from views.py:
				
				'''
				from django.http import HttpResponse

				def hello(request):
					return HttpResponse("Hello World")
				'''
			* Basically it will receives a request from client(browser) and responds with a string in this case.
			
			
			### Receive url parameter:
				
				from the prev example, do the following code on these scripts:
				
					* **urls.py**:
					
						'''
						from django.contrib import admin
						from django.urls import path
						from .views import hello
						from django.urls import path

						urlpatterns = [
							path("hello/<str:name>", hello), #notice the hello path now receives any string in a variable named "name"
							path('admin/', admin.site.urls),

						]
						'''
					
					* **views.py**:
					
						'''
						from django.http import HttpResponse

						def hello(request,name): #gets name variable here
							return HttpResponse("Hello "+name)
						'''
					
					* Now go to : http://localhost:8000/hello/TTT and the html that will appear is the following:
					
						<imgs/hello_name_urls.png>
						
						
						
					* to send an integer is just the same in urls but like this: **path("hello/<int:number>", hello)**
					
					
					
# Django Models and apps

	See this url for more info: https://docs.djangoproject.com/en/2.1/topics/db/models/
	
	Models in Django are like tables in a DB.
	
	But first things first. In Django we dont usually program a web service like in the previous chapter.
	
	We have our django project folder and each project is composed by a number of apps that do specific functions on the web server.

	For instance, we want to make a app to manage clients so on the terminal write: **python manage.py startapp clients**	
	
	This command will generate a new folder clients in the project as it is possible to see in <imgs/first-app-clients.png>
	
	## Models
	
		Now on the new app clients/models.py write the following: 
		
			'''
			from django.db import models

			# Create your models here.
			class Person(models.Model):
			
				#buzz word is field types 
				first_name = models.CharField(max_length=30)
				last_name = models.CharField(max_length=30)
				age = models.IntegerField()
				salary = models.DecimalField(max_digits=5,decimal_places=2)
				bio=models.TextField()
			'''

		This is like a SQL Table django automatically creates. On the django docs they explain the previous class would have the SQL equivalent:
		
			'''
			CREATE TABLE myapp_person (
				"id" serial NOT NULL PRIMARY KEY,
				"first_name" varchar(30) NOT NULL,
				"last_name" varchar(30) NOT NULL
				//...
			);
			'''
		Also it adds the notes:
		
			'''
			Some technical notes:

			The name of the table, myapp_person, is automatically derived from some model metadata but can be overridden. See Table names for more details.
			An id field is added automatically, but this behavior can be overridden. See Automatic primary key fields.
			The CREATE TABLE SQL in this example is formatted using PostgreSQL syntax, but itâ€™s worth noting Django uses SQL tailored to the database backend specified in your settings file.
			
			'''
		
		### Migrations
		
			If you havent notice there is a folder named migrations in the folder of the app clients.
			
			This folder will store all calsses created in models, and is used by django to create the DB (that it seems to be able to work with any DB like sqlite the default but also postgres ...)
			
			On project folder settings.py there is a code like this:
			
				'''
				# Database
				# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

				DATABASES = {
					'default': {
						'ENGINE': 'django.db.backends.sqlite3',
						'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
					}
				}
				
				'''
			Basically is using sqlite3 as db engine.
			
			If you run the server with :**python manage.py runserver** ; it will appear the following text:
			
				'''
				You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
				Run 'python manage.py migrate' to apply them.
				'''
				
			This appears because we made changes in the model and did not updated in the DB, so lets run :**python manage.py migrate**
			
			This command still will not create the table first you need to add the app in the settings.py:
			
				'''
				# Application definition

				INSTALLED_APPS = [
					'django.contrib.admin',
					'django.contrib.auth',
					'django.contrib.contenttypes',
					'django.contrib.sessions',
					'django.contrib.messages',
					'django.contrib.staticfiles',
					'clients', #added here!
				]
				
				'''
				
				
			After this do the following: **python manage.py makemigrations** ; 

				'''
				Your models have changes that are not yet reflected in a migration, and so won't be applied.
				Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them.

				'''
			Now apply the DB using: **python manage.py migrate**
				
			Now we have table clients working, is possible to see in /project/clients/migrations/0001_initia.py   <imgs/table-clients-created.png>	
			
			Run  the server again with: **python manage.py runserver** 
			
			
# Django Admin

	Django provides an admin page, in order to facilitates the management of server backend (like tables/models)
	
	To access django admin page on localhost:8000/admin, first you need to create a super user.

	The commando to create the super user is **python manage.py createsuperuser** and give an user name and password like: "admin:admin". It will ask the email that you can press enter to skip
	
	So on localhost:8000/admin the server will serve the following page: <imgs/admin-page.png>
	
	Now to see the clients model in admin page o to clients app folder in admin.py and write the following code:
	
		'''
		from django.contrib import admin
		from .models import Person


		# Register your models here.
		admin.site.register(Person)
		
		'''
	
	It will appear the following:
	
		<imgs/insert-persons-table-django-admin.png>
		
		
	(Note: there was a problem with the text field bio that is easy to solve but it is not here documented)

	On models insert this new line in order to admin show person name and last name on the interface:
		
		On **models.py** of the app **clients**
		'''
		from django.db import models

		# Create your models here.
		class Person(models.Model):
			# buzz word is field types
			first_name = models.CharField(max_length=30)
			last_name = models.CharField(max_length=30)
			age = models.IntegerField()
			salary = models.DecimalField(max_digits=5, decimal_places=2)
			bio = models.TextField()
			
			#Added Here!!
			def __str__(self):
				return str(self.first_name + " " + self.last_name)
		'''
	
	<imgs/added-person-admin>
	
	Now use the django admin which is very easy...
	
	
# Templates

	As flask or bottle you need to create a new folder for the templates. Different from bottle and flask, in Django you can actually say on settings wich folder is the template folder
	
	On project folder settings go to this section:
	
		'''
		TEMPLATES = [
			{
				'BACKEND': 'django.template.backends.django.DjangoTemplates',
				'DIRS': ['template'],  # add template folder
				'APP_DIRS': True,
				'OPTIONS': {
					'context_processors': [
						'django.template.context_processors.debug',
						'django.template.context_processors.request',
						'django.contrib.auth.context_processors.auth',
						'django.contrib.messages.context_processors.messages',
					],
				},
			},
		]
		'''
	
	In the previous code I created a folder name "template" but it could be any other name, and this folder must be in the same working directory of manage.py
	
	Create in this folder a File called "index.html"

	Now create a html file in the template folder. A shorth cut in pycharm to generate a html default tags write: **html:5** and then **press Crt + Space** on it it will suggest **html:5** press in this option and pycharm does the rest
	
	Insert **<h1>Hello {{name}}</h1>** on body tag 
	
	Now on the hello function insert the following code: 
	
	'''
	from django.http import HttpResponse
	from django.shortcuts import render

	def hello(request,name):
		#return HttpResponse("Hello "+name)
		return render(request,"index.html",{'name': name})
	'''
	
	django server will automatically serve this html page in template folder to the client, and fiel the **{{name}}** parameter in html
	
	## Template language
	
		See https://docs.djangoproject.com/en/2.1/ref/templates/language/ for more information.
		
		One thing very important in this template language is that it is very sensitive, see this example: 
		
			template language accepts : 
				
				'''
				<!doctype html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<meta name="viewport"
						  content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<title>Document</title>
				</head>
				<body>
					{% if name != '' and age >= 0 %}
						<p>{{name}} was found and his/her age is {{age}}</p>
					{% else %}
						<p>Person not found!</p>
					{% endif %}
				</body>
				</html>
				'''
				
				
				but does not accept this: 
				
				'''
				...
				{% if name!='' ...
				...
				'''
				
				**name!=''** is different from **name != ''**

# Serve Static files

	See more info here: https://docs.djangoproject.com/en/2.0/howto/static-files/
	
	So as with templates, on settings file lets add the following:
	
		'''
		 Static files (CSS, JavaScript, Images)
		# https://docs.djangoproject.com/en/2.1/howto/static-files/

		STATIC_URL = '/static/'
		
		#Added Here below----
		STATICFILES_DIRS = [
			'static_files',
		]
		'''
		
	Create folder in project directory named **static_files**
	
	Now for instance the index html will have this code:
	
		'''
		{% load static %}
		<!doctype html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<meta name="viewport"
				  content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
			<meta http-equiv="X-UA-Compatible" content="ie=edge">
			<link rel="stylesheet" href="{% static "style.css" %}">
			<title>Hello</title>
		</head>
		<body>
		<h1 class="red" >Hello {{name}}</h1>
		<img src="{% static "imgs/gogeta_super_saiyan_blue.jpg" %}" >
		</body>
		</html>
		'''
	
	Very important the load static at beginning, and the the image and style sheet are files inside **static_files** folder
	
	If you can notice the image is inside a folder named **imgs** inside **static_files** folder.
	
	
# Upload Photos to table!

	First create a folder for media, for instance a folder in project directory named **"media"**
	
	Now on settings.py of project insert the following code:
	
		'''
		# Media files

		MEDIA_URL = '/media/'

		MEDIA_ROOT = 'media'
		'''

	On folder clients/models.py add a line of code to accept images:
	
		'''
		from django.db import models


		# Create your models here.
		class Person(models.Model):
			# buzz word is field types
			first_name = models.CharField(max_length=30)
			last_name = models.CharField(max_length=30)
			age = models.IntegerField()
			salary = models.DecimalField(max_digits=5, decimal_places=2)
			bio = models.TextField()
			#Added here!!!
			photo = models.ImageField(upload_to="imgs", null=True, blank=True)

			def __str__(self):
				return str(self.first_name + " " + self.last_name)

		'''
	
	The upload_to field is the folder inside media it will upload image; the null **field** and **blank** is to make this input not required

	Now go to localhost:8000/admin and insert a new person and it will accept photos
	
	But still cannot insert photo on folder ith person name :(
	
	
# CRUD - Create Read Update Delete

To make this application correctly, first we need to organize the urls. One thing we can do is divide urls by application **(One project can have multiple applications)**.
So on clients application create a new file called urls.py, **just like in folder with the same name as the project**
The new clients/urls.py file can have this code:

	'''
	from django.urls import path

	urlpatterns = [
		path("list/", person_list),


	]
	'''

On the file: **clients/views** insert the following code:

	'''
	from django.shortcuts import render
	from django.http import HttpResponse
	# Create your views here.
	def person_list(request):
		return render(request,"person.html")
		#return HttpResponse("Bla bla it worked even though there is an error importing clients????")
	'''
	
Now in the project urls file, include all clients application urls. To do that, see the following code.

Project urls file:
	'''
	
	from clients import urls as clients_urls #added here!
	from django.contrib import admin
	from django.urls import path, include

	from .views import hello

	urlpatterns = [
		#path("hello/<str:name>", hello),
		path("hello/<str:name>", hello),
		path('person/',include(clients_urls)), #added here!
		path('admin/', admin.site.urls),
		#path("person/<str:name>", person),

	]

	'''
	
Now all localhost:8000/person/<X>... will go to clients app urls represented here by an <X>
So in our case localhost:8000/person/list

##List clients

In this section we will actually do the function **list_persons**

First create new html in template folder ("list_persons.html") with this code:

	'''
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>List Persons</title>
	</head>
	<body>
	<ul>
		{% for person in persons %}
			<li>
				{{person.first_name}}
			</li>
		{% endfor %}

	</ul>
	</body>
	</html>
	'''

Essentially it will receive the actual persons in the DB and write on a list their first name.
For this to work the views file from clients must have the following code:

	'''
	from django.shortcuts import render
	from django.http import HttpResponse
	from .models import Person


	# Create your views here.
	def person_list(request):
		persons = Person.objects.all()
		return render(request, "list_persons.html", {'persons': persons})
		# return HttpResponse("Bla bla it worked even though there is an error importing clients????")

	'''
	
We need to import from **clients/models** the class Person, and then we can obtain all their objects with the code **Person.objects.all()**	and we send it in the template.

It will work like this:

<imgs/list_persons.png>


Now any new Person inserted in the /admin will be updated on this list.

##